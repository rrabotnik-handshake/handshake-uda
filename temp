
        try:
            validateWeather(message)
        except ValidationError:
            self.fail("validate() had a ValidationError")

    def test_bad_latitude(self):
        message = weather_service_pb2.GetWeatherRequest()
        message.latitude = -91
        message.longitude = 180
        message.forecast_date = datetime.now() + timedelta(days=1)

        with self.assertRaises(ValidationError) as context:
            validateWeather(message)

        validationErr = context.exception
        self.assertEqual(1, len(validationErr.violations))

    def test_bad_longitude(self):
        message = weather_service_pb2.GetWeatherRequest()
        message.latitude = -90
        message.longitude = 181
        message.forecast_date = datetime.now() + timedelta(days=1)

        with self.assertRaises(ValidationError) as context:
            validateWeather(message)

        validationErr = context.exception
        self.assertEqual(1, len(validationErr.violations))

    def test_bad_forecast_date(self):
        message = weather_service_pb2.GetWeatherRequest()
        message.latitude = -90
        message.longitude = 180
        message.forecast_date = datetime.now() + timedelta(days=4)

        with self.assertRaises(ValidationError) as context:
            validateWeather(message)

        validationErr = context.exception
        self.assertEqual(1, len(validationErr.violations))
        
        
        
        
        def test_valid_employer(self):
        employer = handshake_domain_pb2.Employer(
            employer_name="Valid Corp",
            industry="Technology"
        )
        try:
            self.validator.validate(employer)
        except ValidationError as e:
            self.fail(f"Validation unexpectedly failed: {e}")

    def test_invalid_employer_name_too_short(self):
        employer = handshake_domain_pb2.Employer(
            employer_name="A"  # Too short
        )
        with self.assertRaises(ValidationError) as ctx:
            self.validator.validate(employer)
        print_violations("Invalid employer_name (too short)", ctx.exception)

    def test_valid_jobseeker(self):
        js = handshake_domain_pb2.JobSeeker(
            email="test@example.com",
            full_name="Alice Johnson",
            graduation_year=2025
        )
        try:
            self.validator.validate(js)
        except ValidationError as e:
            self.fail(f"Validation unexpectedly failed: {e}")

    def test_invalid_jobseeker_email_too_short(self):
        js = handshake_domain_pb2.JobSeeker(
            email="t@x",
            full_name="Bob",
            graduation_year=2025
        )
        with self.assertRaises(ValidationError) as ctx:
            self.validator.validate(js)
        print_violations("Invalid email (too short)", ctx.exception)

    def test_invalid_graduation_year_too_early(self):
        js = handshake_domain_pb2.JobSeeker(
            email="test@example.com",
            full_name="John Doe",
            graduation_year=1990  # Too early
        )
        with self.assertRaises(ValidationError) as ctx:
            self.validator.validate(js)
        print_violations("Graduation year too early", ctx.exception)

    def test_invalid_job_description_too_short(self):
        job = handshake_domain_pb2.Job(
            title="X",
            description="Short"
        )
        with self.assertRaises(ValidationError) as ctx:
            self.validator.validate(job)
        print_violations("Job description too short", ctx.exception)


if __name__ == "__main__":
    unittest.main()


